{"version":3,"sources":["YearMonthDateField.tsx"],"names":["YearMonthDateField","React","Component","props","defaultValue","value","date","setState","length","Keyboard","dismiss","month","state","refDate","current","focus","year","refMonth","maximumDate","minimumDate","handleErrors","onSubmit","padStart","Date","getFullYear","componentDidMount","autoFocus","refYear","UNSAFE_componentWillReceiveProps","nextProps","JSON","stringify","nextState","render","testID","containerStyle","styleInput","styleInputYear","labelDate","labelMonth","labelYear","editable","placeholderTextColor","styles","container","onChangeYear","onBlur","onChangeMonth","onChangeDate"],"mappings":"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","sourcesContent":["import React, { createRef } from 'react';\nimport { View, Keyboard, TextInput } from 'react-native';\nimport {\n  int,\n  isValidDate,\n  formatYearDigits,\n  getOnlyNumber,\n  getDateDefault,\n  daysInMonth,\n  dateInRange,\n} from './utils';\nimport Input from './Input';\nimport type { DateFieldProps } from './types';\nimport styles from './styles';\n\ntype State = {\n  date: string;\n  month: string;\n  year: string;\n};\n\nclass YearMonthDateField extends React.Component<DateFieldProps, State> {\n  static defaultProps = {\n    labelDate: 'Date',\n    labelMonth: 'Month',\n    labelYear: 'Year',\n    editable: true,\n  };\n\n  state = { ...getDateDefault(this.props.defaultValue) };\n\n  refDate = createRef<TextInput>();\n  refMonth = createRef<TextInput>();\n  refYear = createRef<TextInput>();\n\n  componentDidMount() {\n    if (this.props.autoFocus) {\n      this.refYear.current?.focus();\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: DateFieldProps) {\n    if (\n      JSON.stringify(getDateDefault(nextProps.value)) !==\n      JSON.stringify(getDateDefault(this.props.value))\n    ) {\n      const { date, month, year } = getDateDefault(nextProps.value);\n      const nextState = {\n        date: date ? date.padStart(2, '0') : '',\n        month: month ? month.padStart(2, '0') : '',\n        year,\n      };\n      this.setState(nextState);\n    }\n  }\n\n  onChangeDate = (value: string) => {\n    const date = getOnlyNumber(int(value) > 31 ? '31' : value);\n    this.setState({ date }, () => {\n      if (date.length === 2) {\n        Keyboard.dismiss();\n      }\n    });\n  };\n\n  onChangeMonth = (value: string) => {\n    const month = getOnlyNumber(int(value) > 12 ? '12' : value);\n    this.setState({\n      month,\n      date: daysInMonth(this.state),\n    });\n    if (month.length === 2) {\n      this.refDate.current?.focus();\n    }\n  };\n\n  onChangeYear = (value: string) => {\n    const year = getOnlyNumber(value);\n    this.setState({ year });\n    if (year.length === 4) {\n      this.refMonth.current?.focus();\n    }\n  };\n\n  onBlur = () => {\n    const { maximumDate, minimumDate, handleErrors, onSubmit } = this.props;\n    const current = { ...this.state };\n    if (int(current.date) === 0) {\n      current.date = '01';\n    }\n    if (current.date.length === 1) {\n      current.date = current.date.padStart(2, '0');\n    }\n    if (int(current.month) === 0) {\n      current.month = '01';\n    }\n    if (current.month.length === 1) {\n      current.month = current.month.padStart(2, '0');\n    }\n    if (int(current.year) === 0) {\n      current.year = `${new Date().getFullYear()}`;\n    }\n    if (current.year.length > 1 && current.year.length < 4) {\n      current.year = `${formatYearDigits(int(current.year))}`;\n    }\n    const value = new Date(\n      int(current.year),\n      int(current.month) - 1, // new Date(year, monthIndex, day)\n      int(current.date)\n    );\n    if (current.date) {\n      if (\n        (minimumDate || maximumDate) &&\n        !dateInRange(value, minimumDate, maximumDate)\n      ) {\n        handleErrors && handleErrors();\n        this.setState({ date: '', month: '', year: '' });\n      } else {\n        if (isValidDate(value)) {\n          onSubmit && onSubmit(value);\n        }\n        this.setState({ ...current });\n      }\n    }\n  };\n\n  render() {\n    const { date, month, year } = this.state;\n    const {\n      testID,\n      containerStyle,\n      styleInput,\n      styleInputYear,\n      labelDate,\n      labelMonth,\n      labelYear,\n      editable,\n      placeholderTextColor,\n    } = this.props;\n\n    return (\n      <View {...{ testID }} style={[styles.container, containerStyle]}>\n        <Input\n          ref={this.refYear}\n          value={year}\n          maxLength={4}\n          placeholder={labelYear}\n          style={styleInput}\n          onChangeText={this.onChangeYear}\n          onSubmitEditing={() => this.refMonth.current?.focus()}\n          onBlur={this.onBlur}\n          {...{ editable, placeholderTextColor }}\n        />\n        <Input\n          ref={this.refMonth}\n          value={month}\n          placeholder={labelMonth}\n          style={styleInput}\n          onChangeText={this.onChangeMonth}\n          onSubmitEditing={() => this.refDate.current?.focus()}\n          onBlur={this.onBlur}\n          {...{ editable, placeholderTextColor }}\n        />\n        <Input\n          ref={this.refDate}\n          value={date}\n          returnKeyType=\"done\"\n          placeholder={labelDate}\n          style={[styleInput, styleInputYear]}\n          onChangeText={this.onChangeDate}\n          onSubmitEditing={() => Keyboard.dismiss()}\n          onBlur={this.onBlur}\n          {...{ editable, placeholderTextColor }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default YearMonthDateField;\n"]}