"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _utils = require("./utils");

var _Input = _interopRequireDefault(require("./Input"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DateMonthYearField extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", { ...(0, _utils.getDateDefault)(this.props.defaultValue)
    });

    _defineProperty(this, "refDate", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(this, "refMonth", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(this, "refYear", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(this, "onChangeDate", value => {
      const date = (0, _utils.getOnlyNumber)((0, _utils.int)(value) > 31 ? '31' : value);
      this.setState({
        date
      });

      if (date.length === 2) {
        var _this$refMonth$curren;

        (_this$refMonth$curren = this.refMonth.current) === null || _this$refMonth$curren === void 0 ? void 0 : _this$refMonth$curren.focus();
      }
    });

    _defineProperty(this, "onChangeMonth", value => {
      const month = (0, _utils.getOnlyNumber)((0, _utils.int)(value) > 12 ? '12' : value);
      this.setState({
        month,
        date: (0, _utils.daysInMonth)(this.state)
      });

      if (month.length === 2) {
        var _this$refYear$current;

        (_this$refYear$current = this.refYear.current) === null || _this$refYear$current === void 0 ? void 0 : _this$refYear$current.focus();
      }
    });

    _defineProperty(this, "onChangeYear", value => {
      const year = (0, _utils.getOnlyNumber)(value);
      this.setState({
        year
      }, () => {
        if (year.length === 4) {
          _reactNative.Keyboard.dismiss();
        }
      });
    });

    _defineProperty(this, "onBlur", () => {
      const {
        hideDate,
        maximumDate,
        minimumDate,
        handleErrors,
        onSubmit
      } = this.props;
      const current = { ...this.state
      };

      if ((0, _utils.int)(current.date) === 0 || hideDate) {
        current.date = '01';
      }

      if (current.date.length === 1) {
        current.date = current.date.padStart(2, '0');
      }

      if ((0, _utils.int)(current.month) === 0) {
        current.month = '01';
      }

      if (current.month.length === 1) {
        current.month = current.month.padStart(2, '0');
      }

      if ((0, _utils.int)(current.year) === 0) {
        current.year = `${new Date().getFullYear()}`;
      }

      if (current.year.length > 1 && current.year.length < 4) {
        current.year = `${(0, _utils.formatYearDigits)((0, _utils.int)(current.year))}`;
      }

      const value = new Date((0, _utils.int)(current.year), (0, _utils.int)(current.month) - 1, // new Date(year, monthIndex, day)
      (0, _utils.int)(current.date));

      if (current.year) {
        if ((minimumDate || maximumDate) && !(0, _utils.dateInRange)(value, minimumDate, maximumDate)) {
          handleErrors && handleErrors();
          this.setState({
            date: '',
            month: '',
            year: ''
          });
        } else {
          if ((0, _utils.isValidDate)(value)) {
            onSubmit && onSubmit(value);
          }

          this.setState({ ...current
          });
        }
      }
    });
  }

  componentDidMount() {
    if (this.props.autoFocus) {
      var _this$refDate$current;

      (_this$refDate$current = this.refDate.current) === null || _this$refDate$current === void 0 ? void 0 : _this$refDate$current.focus();
    }
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (JSON.stringify((0, _utils.getDateDefault)(nextProps.value)) !== JSON.stringify((0, _utils.getDateDefault)(this.props.value))) {
      const {
        date,
        month,
        year
      } = (0, _utils.getDateDefault)(nextProps.value);
      const nextState = {
        date: date ? date.padStart(2, '0') : '',
        month: month ? month.padStart(2, '0') : '',
        year
      };
      this.setState(nextState);
    }
  }

  render() {
    const {
      date,
      month,
      year
    } = this.state;
    const {
      testID,
      containerStyle,
      styleInput,
      styleInputYear,
      labelDate,
      labelMonth,
      labelYear,
      editable,
      hideDate,
      placeholderTextColor
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      testID,
      style: [_styles.default.container, containerStyle]
    }, !hideDate && /*#__PURE__*/_react.default.createElement(_Input.default, {
      ref: this.refDate,
      value: date,
      placeholder: labelDate,
      style: styleInput,
      onChangeText: this.onChangeDate,
      onSubmitEditing: () => {
        var _this$refMonth$curren2;

        return (_this$refMonth$curren2 = this.refMonth.current) === null || _this$refMonth$curren2 === void 0 ? void 0 : _this$refMonth$curren2.focus();
      },
      onBlur: this.onBlur,
      editable,
      placeholderTextColor
    }), /*#__PURE__*/_react.default.createElement(_Input.default, {
      ref: this.refMonth,
      value: month,
      placeholder: labelMonth,
      style: styleInput,
      onChangeText: this.onChangeMonth,
      onSubmitEditing: () => {
        var _this$refYear$current2;

        return (_this$refYear$current2 = this.refYear.current) === null || _this$refYear$current2 === void 0 ? void 0 : _this$refYear$current2.focus();
      },
      onBlur: this.onBlur,
      editable,
      placeholderTextColor
    }), /*#__PURE__*/_react.default.createElement(_Input.default, {
      ref: this.refYear,
      value: year,
      maxLength: 4,
      returnKeyType: "done",
      placeholder: labelYear,
      style: [styleInput, styleInputYear],
      onChangeText: this.onChangeYear,
      onSubmitEditing: () => _reactNative.Keyboard.dismiss(),
      onBlur: this.onBlur,
      editable,
      placeholderTextColor
    }));
  }

}

_defineProperty(DateMonthYearField, "defaultProps", {
  labelDate: 'Date',
  labelMonth: 'Month',
  labelYear: 'Year',
  editable: true
});

var _default = DateMonthYearField;
exports.default = _default;
//# sourceMappingURL=DateMonthYearField.js.map