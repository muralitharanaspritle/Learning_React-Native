function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { createRef } from 'react';
import { View, Keyboard } from 'react-native';
import { int, isValidDate, formatYearDigits, getOnlyNumber, getDateDefault, daysInMonth, dateInRange } from './utils';
import Input from './Input';
import styles from './styles';

class YearMonthDateField extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", { ...getDateDefault(this.props.defaultValue)
    });

    _defineProperty(this, "refDate", /*#__PURE__*/createRef());

    _defineProperty(this, "refMonth", /*#__PURE__*/createRef());

    _defineProperty(this, "refYear", /*#__PURE__*/createRef());

    _defineProperty(this, "onChangeDate", value => {
      const date = getOnlyNumber(int(value) > 31 ? '31' : value);
      this.setState({
        date
      }, () => {
        if (date.length === 2) {
          Keyboard.dismiss();
        }
      });
    });

    _defineProperty(this, "onChangeMonth", value => {
      const month = getOnlyNumber(int(value) > 12 ? '12' : value);
      this.setState({
        month,
        date: daysInMonth(this.state)
      });

      if (month.length === 2) {
        var _this$refDate$current;

        (_this$refDate$current = this.refDate.current) === null || _this$refDate$current === void 0 ? void 0 : _this$refDate$current.focus();
      }
    });

    _defineProperty(this, "onChangeYear", value => {
      const year = getOnlyNumber(value);
      this.setState({
        year
      });

      if (year.length === 4) {
        var _this$refMonth$curren;

        (_this$refMonth$curren = this.refMonth.current) === null || _this$refMonth$curren === void 0 ? void 0 : _this$refMonth$curren.focus();
      }
    });

    _defineProperty(this, "onBlur", () => {
      const {
        maximumDate,
        minimumDate,
        handleErrors,
        onSubmit
      } = this.props;
      const current = { ...this.state
      };

      if (int(current.date) === 0) {
        current.date = '01';
      }

      if (current.date.length === 1) {
        current.date = current.date.padStart(2, '0');
      }

      if (int(current.month) === 0) {
        current.month = '01';
      }

      if (current.month.length === 1) {
        current.month = current.month.padStart(2, '0');
      }

      if (int(current.year) === 0) {
        current.year = `${new Date().getFullYear()}`;
      }

      if (current.year.length > 1 && current.year.length < 4) {
        current.year = `${formatYearDigits(int(current.year))}`;
      }

      const value = new Date(int(current.year), int(current.month) - 1, // new Date(year, monthIndex, day)
      int(current.date));

      if (current.date) {
        if ((minimumDate || maximumDate) && !dateInRange(value, minimumDate, maximumDate)) {
          handleErrors && handleErrors();
          this.setState({
            date: '',
            month: '',
            year: ''
          });
        } else {
          if (isValidDate(value)) {
            onSubmit && onSubmit(value);
          }

          this.setState({ ...current
          });
        }
      }
    });
  }

  componentDidMount() {
    if (this.props.autoFocus) {
      var _this$refYear$current;

      (_this$refYear$current = this.refYear.current) === null || _this$refYear$current === void 0 ? void 0 : _this$refYear$current.focus();
    }
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (JSON.stringify(getDateDefault(nextProps.value)) !== JSON.stringify(getDateDefault(this.props.value))) {
      const {
        date,
        month,
        year
      } = getDateDefault(nextProps.value);
      const nextState = {
        date: date ? date.padStart(2, '0') : '',
        month: month ? month.padStart(2, '0') : '',
        year
      };
      this.setState(nextState);
    }
  }

  render() {
    const {
      date,
      month,
      year
    } = this.state;
    const {
      testID,
      containerStyle,
      styleInput,
      styleInputYear,
      labelDate,
      labelMonth,
      labelYear,
      editable,
      placeholderTextColor
    } = this.props;
    return /*#__PURE__*/React.createElement(View, {
      testID,
      style: [styles.container, containerStyle]
    }, /*#__PURE__*/React.createElement(Input, {
      ref: this.refYear,
      value: year,
      maxLength: 4,
      placeholder: labelYear,
      style: styleInput,
      onChangeText: this.onChangeYear,
      onSubmitEditing: () => {
        var _this$refMonth$curren2;

        return (_this$refMonth$curren2 = this.refMonth.current) === null || _this$refMonth$curren2 === void 0 ? void 0 : _this$refMonth$curren2.focus();
      },
      onBlur: this.onBlur,
      editable,
      placeholderTextColor
    }), /*#__PURE__*/React.createElement(Input, {
      ref: this.refMonth,
      value: month,
      placeholder: labelMonth,
      style: styleInput,
      onChangeText: this.onChangeMonth,
      onSubmitEditing: () => {
        var _this$refDate$current2;

        return (_this$refDate$current2 = this.refDate.current) === null || _this$refDate$current2 === void 0 ? void 0 : _this$refDate$current2.focus();
      },
      onBlur: this.onBlur,
      editable,
      placeholderTextColor
    }), /*#__PURE__*/React.createElement(Input, {
      ref: this.refDate,
      value: date,
      returnKeyType: "done",
      placeholder: labelDate,
      style: [styleInput, styleInputYear],
      onChangeText: this.onChangeDate,
      onSubmitEditing: () => Keyboard.dismiss(),
      onBlur: this.onBlur,
      editable,
      placeholderTextColor
    }));
  }

}

_defineProperty(YearMonthDateField, "defaultProps", {
  labelDate: 'Date',
  labelMonth: 'Month',
  labelYear: 'Year',
  editable: true
});

export default YearMonthDateField;
//# sourceMappingURL=YearMonthDateField.js.map